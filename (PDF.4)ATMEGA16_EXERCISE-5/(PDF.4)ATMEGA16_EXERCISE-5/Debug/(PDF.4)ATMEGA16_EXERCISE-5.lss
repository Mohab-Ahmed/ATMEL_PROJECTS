
(PDF.4)ATMEGA16_EXERCISE-5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  00000785  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <intialize_timer>:

#include <util/delay.h>

void intialize_timer(uint8_t duty_cycle)
{
	TCNT0=0;
  6c:	12 be       	out	0x32, r1	; 50
	OCR0=duty_cycle;
  6e:	8c bf       	out	0x3c, r24	; 60
	DDRB|=(1<<PB3);
  70:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0=(1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) ;
  72:	8a e6       	ldi	r24, 0x6A	; 106
  74:	83 bf       	out	0x33, r24	; 51
  76:	08 95       	ret

00000078 <main>:
	 */ 
}

int main(void)
{
	intialize_timer(64);		//for duty cycle of 25%
  78:	80 e4       	ldi	r24, 0x40	; 64
  7a:	0e 94 36 00 	call	0x6c	; 0x6c <intialize_timer>
	//intialize_timer(128);		//for duty cycle of 50%
	//intialize_timer(192);		//for duty cycle of 75%
	//intialize_timer(256);		//for duty cycle of 100%
	
	//configure input pins
	DDRA&=(~(1<<PA0));
  7e:	d0 98       	cbi	0x1a, 0	; 26
	DDRA&=(~(1<<PA1));
  80:	d1 98       	cbi	0x1a, 1	; 26
	DDRA&=(~(1<<PA2));
  82:	d2 98       	cbi	0x1a, 2	; 26
	
	//configure output pins
	DDRC|=(1<<PC0);
  84:	a0 9a       	sbi	0x14, 0	; 20
	DDRC|=(1<<PC1);
  86:	a1 9a       	sbi	0x14, 1	; 20
	
	//stop motor at start
	PORTC|=(1<<PC0);
  88:	a8 9a       	sbi	0x15, 0	; 21
	PORTC|=(1<<PC1);
  8a:	a9 9a       	sbi	0x15, 1	; 21

	while (1)
	{
		//check for button responsible for clock wise rotation
		if (PINA&(1<<PA0))
  8c:	c8 9b       	sbis	0x19, 0	; 25
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x1c>
		{
			PORTC|=(1<<PC0);
  90:	a8 9a       	sbi	0x15, 0	; 21
			PORTC&=(~(1<<PC1));
  92:	a9 98       	cbi	0x15, 1	; 21
		}
		//check for button responsible for anti clock wise rotation
		if (PINA&(1<<PA1))
  94:	c9 9b       	sbis	0x19, 1	; 25
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x24>
		{
			PORTC&=(~(1<<PC0));
  98:	a8 98       	cbi	0x15, 0	; 21
			PORTC|=(1<<PC1);
  9a:	a9 9a       	sbi	0x15, 1	; 21
		}
		////check for button responsible for stoping the motor
		if (PINA&(1<<PA2))
  9c:	ca 9b       	sbis	0x19, 2	; 25
  9e:	f6 cf       	rjmp	.-20     	; 0x8c <main+0x14>
		{
			PORTC|=(1<<PC0);
  a0:	a8 9a       	sbi	0x15, 0	; 21
			PORTC|=(1<<PC1);
  a2:	a9 9a       	sbi	0x15, 1	; 21
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <main+0x14>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
