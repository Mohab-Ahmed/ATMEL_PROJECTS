
ATMEGA3290_DC-MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000931  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087c  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022b  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  58:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  5c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  60:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>


int main(void)
{
	DDRE=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8d b9       	out	0x0d, r24	; 13
    while (1) 
    {
		if ((PINA&(1<<PA0))==0x01)
		{
			lenght=100000;
			PORTE=0x01;
  80:	31 e0       	ldi	r19, 0x01	; 1
			while(lenght--);
			PORTE=0x02;
  82:	22 e0       	ldi	r18, 0x02	; 2
	DDRE=0xff;
	uint32_t lenght;
    /* Replace with your application code */
    while (1) 
    {
		if ((PINA&(1<<PA0))==0x01)
  84:	00 9b       	sbis	0x00, 0	; 0
  86:	13 c0       	rjmp	.+38     	; 0xae <main+0x32>
		{
			lenght=100000;
			PORTE=0x01;
  88:	3e b9       	out	0x0e, r19	; 14
			while(lenght--);
  8a:	81 ea       	ldi	r24, 0xA1	; 161
  8c:	96 e8       	ldi	r25, 0x86	; 134
  8e:	a1 e0       	ldi	r26, 0x01	; 1
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	a1 09       	sbc	r26, r1
  96:	b1 09       	sbc	r27, r1
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x16>
			PORTE=0x02;
  9a:	2e b9       	out	0x0e, r18	; 14
			lenght=100000;
			while(lenght--);
  9c:	81 ea       	ldi	r24, 0xA1	; 161
  9e:	96 e8       	ldi	r25, 0x86	; 134
  a0:	a1 e0       	ldi	r26, 0x01	; 1
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x28>
  ac:	eb cf       	rjmp	.-42     	; 0x84 <main+0x8>
		}else{PORTE=0x00;}
  ae:	1e b8       	out	0x0e, r1	; 14
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <main+0x8>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
