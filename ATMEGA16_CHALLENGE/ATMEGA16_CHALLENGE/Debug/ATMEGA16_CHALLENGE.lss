
ATMEGA16_CHALLENGE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c3  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <util/delay.h>

int main(void)
{
	DDRD|=(1<<PC0);
  6c:	88 9a       	sbi	0x11, 0	; 17
	DDRD|=(1<<PC1);
  6e:	89 9a       	sbi	0x11, 1	; 17
	DDRD|=(1<<PC2);
  70:	8a 9a       	sbi	0x11, 2	; 17
	DDRD|=(1<<PC3);
  72:	8b 9a       	sbi	0x11, 3	; 17
	
	DDRA&=(~(1<<PA0));
  74:	d0 98       	cbi	0x1a, 0	; 26
	DDRA&=(~(1<<PA1));
  76:	d1 98       	cbi	0x1a, 1	; 26
	
	uint8_t count=0;
	PORTD=count;
  78:	12 ba       	out	0x12, r1	; 18
	DDRD|=(1<<PC3);
	
	DDRA&=(~(1<<PA0));
	DDRA&=(~(1<<PA1));
	
	uint8_t count=0;
  7a:	80 e0       	ldi	r24, 0x00	; 0
	PORTD=count;
	while (1)
	{
		if ((PINA&(1<<PA0)))
  7c:	c8 9b       	sbis	0x19, 0	; 25
  7e:	0e c0       	rjmp	.+28     	; 0x9c <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f e5       	ldi	r18, 0x5F	; 95
  82:	3a ee       	ldi	r19, 0xEA	; 234
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	21 50       	subi	r18, 0x01	; 1
  88:	30 40       	sbci	r19, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
		{
			_delay_ms(300);
			if (count==9)
  92:	89 30       	cpi	r24, 0x09	; 9
  94:	99 f3       	breq	.-26     	; 0x7c <main+0x10>
			{
				continue;
			}
			count++;
  96:	8f 5f       	subi	r24, 0xFF	; 255
			PORTD=count;
  98:	82 bb       	out	0x12, r24	; 18
  9a:	f0 cf       	rjmp	.-32     	; 0x7c <main+0x10>
		}
		else if ((PINA&(1<<PA1)))
  9c:	c9 9b       	sbis	0x19, 1	; 25
  9e:	ee cf       	rjmp	.-36     	; 0x7c <main+0x10>
  a0:	2f e5       	ldi	r18, 0x5F	; 95
  a2:	3a ee       	ldi	r19, 0xEA	; 234
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
		{
			_delay_ms(300);
			if (count==0)
  b2:	88 23       	and	r24, r24
  b4:	19 f3       	breq	.-58     	; 0x7c <main+0x10>
			{
				continue;
			}
			count--;
  b6:	81 50       	subi	r24, 0x01	; 1
			PORTD=count;
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	e0 cf       	rjmp	.-64     	; 0x7c <main+0x10>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
