
(PDF.3)ATMEGA16_EXERCISE-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ec  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00000edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_2>:
#endif

#include <util/delay.h>

ISR(INT1_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
	uint8_t temp=PORTC;
  80:	25 b3       	in	r18, 0x15	; 21
	if ((PIND&(1<<PD3)))
  82:	83 9b       	sbis	0x10, 3	; 16
  84:	1a c0       	rjmp	.+52     	; 0xba <__vector_2+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	3f e5       	ldi	r19, 0x5F	; 95
  88:	4a ee       	ldi	r20, 0xEA	; 234
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	31 50       	subi	r19, 0x01	; 1
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <__vector_2+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <__vector_2+0x2a>
  96:	00 00       	nop
	{
		_delay_ms(300);		//switch bounce counter
		PORTC=0xff;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	3f e9       	ldi	r19, 0x9F	; 159
  a0:	46 e8       	ldi	r20, 0x86	; 134
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	31 50       	subi	r19, 0x01	; 1
  a6:	40 40       	sbci	r20, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <__vector_2+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <__vector_2+0x42>
  ae:	00 00       	nop
		for(uint8_t i=0;i<9;i++)
		{
			_delay_ms(500);
			PORTC^=0xff;
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	80 95       	com	r24
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	91 50       	subi	r25, 0x01	; 1
	uint8_t temp=PORTC;
	if ((PIND&(1<<PD3)))
	{
		_delay_ms(300);		//switch bounce counter
		PORTC=0xff;
		for(uint8_t i=0;i<9;i++)
  b8:	91 f7       	brne	.-28     	; 0x9e <__vector_2+0x32>
		{
			_delay_ms(500);
			PORTC^=0xff;
		}
	}
	PORTC=temp;
  ba:	25 bb       	out	0x15, r18	; 21
}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	4f 91       	pop	r20
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <main>:


int main(void)
{
	DDRC|=0xff;				//set port C as output
  d0:	84 b3       	in	r24, 0x14	; 20
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 bb       	out	0x14, r24	; 20
	DDRD&=(~(1<<PD3));		//set pin 3 in port D as input
  d6:	8b 98       	cbi	0x11, 3	; 17
	
	sei();					//enable I-bit in status register
  d8:	78 94       	sei
	GICR|=(1<<INT1);		//enable INT1 interrupt in global register
  da:	8b b7       	in	r24, 0x3b	; 59
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC10);		//set it to high level
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	85 bf       	out	0x35, r24	; 53
	
    while (1) 
    {
		PORTC|=(1<<PC0);
  e6:	a8 9a       	sbi	0x15, 0	; 21
  e8:	98 e0       	ldi	r25, 0x08	; 8
  ea:	2f e5       	ldi	r18, 0x5F	; 95
  ec:	3a ee       	ldi	r19, 0xEA	; 234
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x20>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x2a>
  fa:	00 00       	nop
		for(uint8_t i=0;i<8;i++)
		{
			_delay_ms(300);
			PORTC<<=1;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	88 0f       	add	r24, r24
 100:	85 bb       	out	0x15, r24	; 21
 102:	91 50       	subi	r25, 0x01	; 1
	MCUCR|=(1<<ISC10);		//set it to high level
	
    while (1) 
    {
		PORTC|=(1<<PC0);
		for(uint8_t i=0;i<8;i++)
 104:	91 f7       	brne	.-28     	; 0xea <main+0x1a>
 106:	ef cf       	rjmp	.-34     	; 0xe6 <main+0x16>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
