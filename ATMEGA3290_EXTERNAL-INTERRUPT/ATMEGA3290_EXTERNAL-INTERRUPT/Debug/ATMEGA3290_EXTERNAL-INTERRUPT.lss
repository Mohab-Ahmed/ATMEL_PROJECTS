
ATMEGA3290_EXTERNAL-INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a96  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091c  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ce  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000231  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000201f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  58:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  5c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  60:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>


 ISR(INT0_vect)
 {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
 	uint8_t temp=PORTA;
  90:	22 b1       	in	r18, 0x02	; 2
 	if (!(PIND&(1<<PD1)))
  92:	49 99       	sbic	0x09, 1	; 9
  94:	1a c0       	rjmp	.+52     	; 0xca <__vector_1+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	3f ef       	ldi	r19, 0xFF	; 255
  98:	46 e7       	ldi	r20, 0x76	; 118
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	31 50       	subi	r19, 0x01	; 1
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <__vector_1+0x20>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <__vector_1+0x2a>
  a6:	00 00       	nop
 	{
 		_delay_ms(30);
		 PORTA=0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	82 b9       	out	0x02, r24	; 2
  ac:	99 e0       	ldi	r25, 0x09	; 9
  ae:	3f ef       	ldi	r19, 0xFF	; 255
  b0:	40 e7       	ldi	r20, 0x70	; 112
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	31 50       	subi	r19, 0x01	; 1
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_1+0x38>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x42>
  be:	00 00       	nop
		 for(uint8_t i=0;i<9;i++)
		 {
			 _delay_ms(50);
			 PORTA^=0xff;
  c0:	82 b1       	in	r24, 0x02	; 2
  c2:	80 95       	com	r24
  c4:	82 b9       	out	0x02, r24	; 2
  c6:	91 50       	subi	r25, 0x01	; 1
 	uint8_t temp=PORTA;
 	if (!(PIND&(1<<PD1)))
 	{
 		_delay_ms(30);
		 PORTA=0xff;
		 for(uint8_t i=0;i<9;i++)
  c8:	91 f7       	brne	.-28     	; 0xae <__vector_1+0x32>
		 {
			 _delay_ms(50);
			 PORTA^=0xff;
		 }
 	}
 	PORTA=temp;	
  ca:	22 b9       	out	0x02, r18	; 2
 }
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:



int main(void)
{
	DDRA=0xff;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	81 b9       	out	0x01, r24	; 1
	DDRD&=(~(1<<PD1));
  e4:	51 98       	cbi	0x0a, 1	; 10
	PORTD|=(1<<PD1);
  e6:	59 9a       	sbi	0x0b, 1	; 11
	
	//handling the interrupt
	EIMSK|=(1<<INT0);
  e8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA=0x00;
  ea:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	sei();
  ee:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		PORTA=0x01;
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	92 b9       	out	0x02, r25	; 2
  f4:	ef e3       	ldi	r30, 0x3F	; 63
  f6:	fc e9       	ldi	r31, 0x9C	; 156
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x18>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x1e>
  fe:	00 00       	nop
 100:	28 e0       	ldi	r18, 0x08	; 8
 102:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(10);
		for (int i=0;i<8;i++)
		{
			PORTA<<=1;
 104:	82 b1       	in	r24, 0x02	; 2
 106:	88 0f       	add	r24, r24
 108:	82 b9       	out	0x02, r24	; 2
 10a:	ef e3       	ldi	r30, 0x3F	; 63
 10c:	fc e9       	ldi	r31, 0x9C	; 156
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x2e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x34>
 114:	00 00       	nop
 116:	21 50       	subi	r18, 0x01	; 1
 118:	31 09       	sbc	r19, r1
    /* Replace with your application code */
    while (1) 
    {
		PORTA=0x01;
		_delay_ms(10);
		for (int i=0;i<8;i++)
 11a:	a1 f7       	brne	.-24     	; 0x104 <main+0x24>
 11c:	ea cf       	rjmp	.-44     	; 0xf2 <main+0x12>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
