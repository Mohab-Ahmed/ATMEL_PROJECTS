
ATMEGA16_EXERCISE-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020d  00000000  00000000  00000c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 47 00 	jmp	0x8e	; 0x8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <util/delay.h>

int main(void)
{
    DDRB&=(~(1<<PB0));	// configure pin 0 of PORTB to be input pin
  6c:	b8 98       	cbi	0x17, 0	; 23
    DDRB&=(~(1<<PB1));	// configure pin 1 of PORTB to be input pin
  6e:	b9 98       	cbi	0x17, 1	; 23
	DDRC|=(1<<PC0);		// configure pin 0 of PORTC to be output pin
  70:	a0 9a       	sbi	0x14, 0	; 20
	DDRC|=(1<<PC1);		// configure pin 1 of PORTC to be output pin
  72:	a1 9a       	sbi	0x14, 1	; 20
	
	PORTC&=(~(1<<PC0));	//initialize LED 0 to be off
  74:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=(~(1<<PC1));	//initialize LED 1 to be off
  76:	a9 98       	cbi	0x15, 1	; 21
	 
    while (1) 
    {
		if((PINB&(1<<PB0))==0x01)
  78:	b0 9b       	sbis	0x16, 0	; 22
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
		{
			PORTC|=(1<<PC0);	//LED ON
  7c:	a8 9a       	sbi	0x15, 0	; 21
  7e:	01 c0       	rjmp	.+2      	; 0x82 <main+0x16>
		}
		else
		{
			PORTC&=(~(1<<PC0));	//LED OFF
  80:	a8 98       	cbi	0x15, 0	; 21
		}
		if((PINB&(1<<PB1))==0x02)
  82:	b1 9b       	sbis	0x16, 1	; 22
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
		{
			PORTC|=(1<<PC1);	//LED ON
  86:	a9 9a       	sbi	0x15, 1	; 21
  88:	f7 cf       	rjmp	.-18     	; 0x78 <main+0xc>
		}
		else
		{
			PORTC&=(~(1<<PC1));	//LED OFF
  8a:	a9 98       	cbi	0x15, 1	; 21
  8c:	f5 cf       	rjmp	.-22     	; 0x78 <main+0xc>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
