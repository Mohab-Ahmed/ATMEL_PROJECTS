
(PDF.4)ATMEGA16_CHALLANGE-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000150  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000602  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058b  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000245  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 65 00 	call	0xca	; 0xca <main>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#define NUM_OF_COUNT 122	//number of count to reach 1 seconds

uint8_t count_overflow=0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	count_overflow++;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
	if (count_overflow==NUM_OF_COUNT)
  8e:	8a 37       	cpi	r24, 0x7A	; 122
  90:	19 f0       	breq	.+6      	; 0x98 <__vector_9+0x1c>

uint8_t count_overflow=0;

ISR(TIMER0_OVF_vect)
{
	count_overflow++;
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	0a c0       	rjmp	.+20     	; 0xac <__vector_9+0x30>
	if (count_overflow==NUM_OF_COUNT)
	{
		count_overflow=0;
  98:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (PORTD==9)
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	89 30       	cpi	r24, 0x09	; 9
  a0:	11 f4       	brne	.+4      	; 0xa6 <__vector_9+0x2a>
		{
			PORTD=0;
  a2:	12 ba       	out	0x12, r1	; 18
  a4:	03 c0       	rjmp	.+6      	; 0xac <__vector_9+0x30>
		}
		else
		{
			PORTD++;
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	82 bb       	out	0x12, r24	; 18
		}
	}		
}
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <initialize_timer>:

void initialize_timer(void)
{
	TCCR0=0x00;				//timer as normal mode
  b8:	13 be       	out	0x33, r1	; 51
	
	TCCR0|=(1<<CS02);		//set prescaler to 256
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	83 bf       	out	0x33, r24	; 51
	
	TCNT0=0x00;				//zeroing the timer to start counting from zero
  c0:	12 be       	out	0x32, r1	; 50
	
	TIMSK|=(1<<TOIE0);		//enable timer interrupt
  c2:	89 b7       	in	r24, 0x39	; 57
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	89 bf       	out	0x39, r24	; 57
  c8:	08 95       	ret

000000ca <main>:
}

int main(void)
{
	DDRD=(1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3);
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
	PORTD=0;
  ce:	12 ba       	out	0x12, r1	; 18
	
	sei();
  d0:	78 94       	sei
	
	initialize_timer();
  d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <initialize_timer>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0xc>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
